/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/lROej0q6UoR
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useEffect, useState } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { ResponsiveLine } from "@nivo/line";
import { mockApiResponse, calculateAnnualPowerOutput } from "@/lib/mockApi";
import { useForecastData } from "./context/ForecastContext";



export default function Dashboard() {

  const [address, setAddress] = useState("");
  const [locationInput, setLocationInput] = useState("address");
  const [location, setLocation] = useState(null);
  const [direction, setDirection] = useState("")
  const [capacity, setCapacity] = useState("")
  const [annualOutput, setAnnualOutput] = useState(0);
  // const [forecastData, setForecastData] = useState({ forecasts: [] })

  const { forecastData, setForecastData } = useForecastData()
  
  console.log("Component mounted, initial location:", location);

  useEffect(() => {
    console.log("Effect ran, location:", location);
  }, [location]);

  useEffect(()=>{
    const output = calculateAnnualPowerOutput(forecastData)
    setAnnualOutput(output)
  }, [forecastData]);
  
  const handleAddressChange = (e) => {
    setAddress(e.target.value);
  };
  
  const handleGetLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log("Geolocation successful, position:", position);
          setLocation({
            lat: position.coords.latitude,
            long: position.coords.longitude,
          });
          console.log("Set location:", location);
        },
        (error) => {
          console.error("Geolocation error:", error);
        }
      );
    }
  };
  
  const handleLocationRadios = (value) => {
    console.log("ðŸš€ ~ handleLocationRadios ~ e:", value)
    
    setLocationInput(value)
  };

  const handleDirectionChange = value => setDirection(value)

  const handleCapacityChange = e => setCapacity(e.target.value)

  const apiKey = process.env.NEXT_PUBLIC_SOLCAST_API_KEY;
  console.log("ðŸš€ ~ Dashboard ~ apiKey:", apiKey)
  
  const handleGetEstimate = async () => {
    const url = new URL('/api/get-solar-estimate', window.location.origin);
    
    url.searchParams.append('latitude', location?.lat ?? '');
    url.searchParams.append('longitude', location?.long ?? '');
    url.searchParams.append('hours', '24');
    url.searchParams.append('period', 'PT30M');
    url.searchParams.append('output_parameters', 'pv_power_rooftop');
    url.searchParams.append('azimuth', direction ?? '');
    url.searchParams.append('capacity', capacity ?? '');

    try {
      const response = await fetch(url.toString(), {
        method: 'GET',
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      console.log('Solar Estimate Data:', data);
      // Handle the data as needed
      setForecastData(data)
    } catch (error) {
      console.error('Error getting solar estimate:', error);
      // Handle the error appropriately
    }

  };

  return (
    <div>
      <Card>
        <CardHeader>
          <CardTitle>Solar Estimate</CardTitle>
          <CardDescription>
            Enter your location and solar array details to get an estimate.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="grid gap-4">
              <RadioGroup
                defaultValue="address"
                className="flex items-center gap-4"
                onValueChange={(value) => handleLocationRadios(value)}
              >
                <Label
                  htmlFor="address-radio"
                  className="flex items-center gap-2 cursor-pointer"
                >
                  <RadioGroupItem
                    id="address-radio"
                    value="address"
                    name="location-radios"
                   
                  />
                  Enter Address
                </Label>
                <Label
                  htmlFor="location-radio"
                  className="flex items-center gap-2 cursor-pointer"
                >
                  <RadioGroupItem
                    id="location-radio"
                    value="location"
                    name="location-radios"
                    
                  />
                  Use Current Location
                </Label>
              </RadioGroup>
              {locationInput === "address" && (
                <div className="grid gap-2">
                  <Label htmlFor="address">Address</Label>
                  <Input
                    id="address"
                    placeholder="123 Main St, Anytown USA"
                    value={address}
                    onChange={handleAddressChange}
                    required
                  />
                </div>
              )}
              {locationInput === "location" && (
                <div className="grid gap-2">
                  <Label htmlFor="location">Location</Label>
                  <Button onClick={handleGetLocation}>
                    Use Current Location
                  </Button>
                  {location && (
                    <div>
                      Latitude: {location.lat}, Longitude: {location.lng}
                    </div>
                  )}
                </div>
              )}
              <div className="grid gap-2">
                <Label htmlFor="direction">Compass Direction</Label>
                <Select
                  id="direction"
                  onValueChange={handleDirectionChange}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select direction" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="north">North</SelectItem>
                    <SelectItem value="east">East</SelectItem>
                    <SelectItem value="south">South</SelectItem>
                    <SelectItem value="west">West</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="grid gap-2">
                <Label htmlFor="capacity">Solar Array Capacity (kW)</Label>
                <Input
                  id="capacity"
                  type="number"
                  min="1"
                  placeholder="5"
                  required
                  value={capacity}
                  onChange={handleCapacityChange}
                />
              </div>
            </div>
            <div className="grid gap-4">
              <Card className="text-muted-foreground">
                <CardHeader>
                  <CardTitle>Estimated Solar Energy Production</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-4xl font-bold">{annualOutput.toFixed(2)} kWh/year</div>
                  <p className="text-muted-foreground">
                    Based on your location and solar array capacity.
                  </p>
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                  <CardTitle>Estimated Cost Savings</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-4xl font-bold">$1,500/year</div>
                  <p className="text-muted-foreground">
                    Compared to your current electricity costs.
                  </p>
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                  <CardTitle>Environmental Impact</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-4xl font-bold">9 tons CO2/year</div>
                  <p className="text-muted-foreground">
                    Reduction in carbon emissions.
                  </p>
                </CardContent>
              </Card>
            </div>
          </form>
        </CardContent>
        <CardFooter>
          <Button
            type="submit"
            className="ml-auto"
            onClick={handleGetEstimate}
          >
            Get Estimate
          </Button>
        </CardFooter>
      </Card>
    </div>
    // </div>)
  );
}

function LineChart(props) {
  return (
    <div {...props}>
      <ResponsiveLine
        data={[
          {
            id: "Desktop",
            data: [
              { x: "Jan", y: 43 },
              { x: "Feb", y: 137 },
              { x: "Mar", y: 61 },
              { x: "Apr", y: 145 },
              { x: "May", y: 26 },
              { x: "Jun", y: 154 },
            ],
          },
          {
            id: "Mobile",
            data: [
              { x: "Jan", y: 60 },
              { x: "Feb", y: 48 },
              { x: "Mar", y: 177 },
              { x: "Apr", y: 78 },
              { x: "May", y: 96 },
              { x: "Jun", y: 204 },
            ],
          },
        ]}
        margin={{ top: 10, right: 10, bottom: 40, left: 40 }}
        xScale={{
          type: "point",
        }}
        yScale={{
          type: "linear",
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#2563eb", "#e11d48"]}
        pointSize={6}
        useMesh={true}
        gridYValues={6}
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application"
      />
    </div>
  );
}

function TimeseriesChart(props) {
  return (
    <div {...props}>
      <ResponsiveLine
        data={[
          {
            id: "Desktop",
            data: [
              { x: "2018-01-01", y: 7 },
              { x: "2018-01-02", y: 5 },
              { x: "2018-01-03", y: 11 },
              { x: "2018-01-04", y: 9 },
              { x: "2018-01-05", y: 12 },
              { x: "2018-01-06", y: 16 },
              { x: "2018-01-07", y: 13 },
            ],
          },
          {
            id: "Mobile",
            data: [
              { x: "2018-01-01", y: 9 },
              { x: "2018-01-02", y: 8 },
              { x: "2018-01-03", y: 13 },
              { x: "2018-01-04", y: 6 },
              { x: "2018-01-05", y: 8 },
              { x: "2018-01-06", y: 14 },
              { x: "2018-01-07", y: 11 },
            ],
          },
        ]}
        margin={{ top: 10, right: 20, bottom: 40, left: 40 }}
        xScale={{
          type: "time",
          format: "%Y-%m-%d",
          useUTC: false,
          precision: "day",
        }}
        xFormat="time:%Y-%m-%d"
        yScale={{
          type: "linear",
          min: 0,
          max: "auto",
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 0,
          tickPadding: 16,
          format: "%d",
          tickValues: "every 1 day",
        }}
        axisLeft={{
          tickSize: 0,
          tickValues: 5,
          tickPadding: 16,
        }}
        colors={["#2563eb", "#e11d48"]}
        pointSize={6}
        useMesh={true}
        gridYValues={6}
        theme={{
          tooltip: {
            chip: {
              borderRadius: "9999px",
            },
            container: {
              fontSize: "12px",
              textTransform: "capitalize",
              borderRadius: "6px",
            },
          },
          grid: {
            line: {
              stroke: "#f3f4f6",
            },
          },
        }}
        role="application"
      />
    </div>
  );
}
